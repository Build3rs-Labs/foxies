import Head from "next/head";
import styles from "@/styles/Home.module.css";
import Image from "next/image";
import Header from "@/components/Header";
import { ApiPromise, WsProvider } from '@polkadot/api';
import React, { useEffect, useState } from "react";
import { useWallet } from "useink";
import { formatWallet, CallContract, getBalances, getTokenIdsForBoth, PSP34_approve, PSP34_allowance, stake } from "../functions/index";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

export default function Coop() {
  const { account, connect, disconnect } = useWallet();
  const [balances, setBalances] = useState([0, 0, 0]);
  const [IDs, setIDs] = useState([]);
  const [isApproved, setIsApproved] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  const [foxBalances, setFoxBalances] = useState([0, 0]);
  const [foxIDs, setFoxIDs] = useState([]);
  const [isFoxApproved, setIsFoxApproved] = useState(false);

  var api;
  var wsProvider;


  const handleApprove = async (animal) => {
    try {

      wsProvider = new WsProvider('wss://ws.test.azero.dev');
      api = await ApiPromise.create({ provider: wsProvider });
      await PSP34_approve(api, account, animal);
      const approvalStatus = await PSP34_allowance(api, account, animal);
      if (animal == "chickens") {
        setIsApproved(approvalStatus);
      }
      else {
        setIsFoxApproved(approvalStatus);
      }
    } catch (error) {
      toast.error("Approval failed: " + error.message);
    } 
  };
  
  const handleStake = async (animal) => {
    try {

      wsProvider = new WsProvider('wss://ws.test.azero.dev');
      api = await ApiPromise.create({ provider: wsProvider });
     
      const stakeStatus = await stake(api, account, animal);
     console.log(stakeStatus);
    } catch (error) {
      toast.error("Approval failed: " + error.message);
    } 
  };
  useEffect(() => {
    if (account) {
      setIsLoading(true);
      const call = async () => {
        wsProvider = new WsProvider('wss://ws.test.azero.dev');
        api = await ApiPromise.create({ provider: wsProvider });

        let result = await getBalances(api, account);
        let approvalStatus = await PSP34_allowance(api, account, 'chickens');
        setIsApproved(approvalStatus);
        let balancesParam = [result[0], result[1]];
        let result2 = await getTokenIdsForBoth(api, account, balancesParam);
        setBalances(result);
        setIDs(result2);

        let foxApprovalStatus = await PSP34_allowance(api, account, 'foxes'); 

        setIsFoxApproved(foxApprovalStatus);

        setIsLoading(false);
      };
      call();
    }
  }, [account]);
  const renderStakeButtons = (animalType) => {
    const isAnimalApproved = animalType === "chicken" ? isApproved : isFoxApproved;
    const approveFunction = animalType === "chicken" ? () => handleApprove('chickens') : () => handleApprove('foxes');
    const stakeFunction = animalType === "chicken" ? () => handleStake('chicken') : () => handleStake('fox'); 
  
    if (isLoading) {
      return <p className="text-center text-white mt-3">Loading...</p>;
    }
  
    if (isAnimalApproved) {
      return (
        <button onClick={stakeFunction} className="relative mx-auto mt-8 border-2 border-black bg-white rounded-full text-2xl lg:text-4xl text-black px-4 flex items-center">
          <span className="relative font-VT323">{`Stake ${animalType === "chicken" ? "Chickens" : "Foxes"}`}</span>
        </button>
      );
    } else {
      return (
        <button onClick={approveFunction} className="relative mx-auto mt-8 border-2 border-black bg-white rounded-full text-2xl lg:text-4xl text-black px-4 flex items-center">
          <span className="relative font-VT323">Approve</span>
        </button>
      );
    }
  };
  
  

  return (
    <>
      <Head>
        <title>Crypto</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <div className={styles.pageBackground}></div>
        <Header />
        <div className="absolute z-40 w-full h-full top-0">
          <h1 className="pt-20 font-VT323 text-white text-5xl lg:text-7xl text-center">
            You're in the coop!
          </h1>
          <div className="pt-14 lg:28 grid grid-cols-1 md:grid-cols-3 lg:grid-flow-row gap-6 font-VT323 text-white text-2xl lg:text-4xl mx-4 lg:mx-16 lg:leading-10">
            <div className="p-4">
              You own {balances[0]} {(balances[0] === 1) ? "chicken" : "chickens"}.
              <p className="pt-12">Stake your NFTs to earn delicious $EGGS rewards.</p>
              {!account ? <p className="text-white">First, connect your wallet</p> :   renderStakeButtons("chicken")}
            </div>
            <div className="p-4 text-center">
              You own {balances[1]} {(balances[1] === 1) ? "fox" : "foxes"}.
              <p className="pt-12">Stake your NFTs to try to steal the precious $EGGS.</p>
              {!account ? <p className="text-white">First, connect your wallet</p> :   renderStakeButtons("foxes")}
            </div>
            <div className="p-4 text-center">
              Must read before staking!
              <Image className="mx-auto" src="/book.png" width={160} height={160} alt="book"/>
              <p className="py-8">Your $EGGS balance: <br />{balances[2]} $EGGS</p>
              <Image className="mx-auto" src="/egg.png" width={140} alt="egg" height={140} />
            </div>
          </div>
        </div>
      </div>
    </>
  );
}
